{"version":3,"file":"product-management.umd.min.js","sources":["~/@wonderful/product-management/src/products/actions/Product.ts","~/@wonderful/product-management/src/products/reducers/products.ts","~/@wonderful/product-management/src/products/reducers/index.ts","~/@wonderful/product-management/src/products/containers/add-product-container.ts","~/@wonderful/product-management/src/products/components/add-product.ts","~/@wonderful/product-management/src/products/products.module.ts","~/@wonderful/product-management/src/config.ts","~/@wonderful/product-management/src/product-management.module.ts"],"sourcesContent":["import { Action } from '@ngrx/store';\nimport { Product } from '../models/product';\n\n\nexport const /** @type {?} */ ADD = '[Releases] Add';\nexport class Add implements Action {\n    readonly type = ADD;\n/**\n * @param {?} payload\n */\nconstructor(public payload: Product) { }\n}\n\nfunction Add_tsickle_Closure_declarations() {\n/** @type {?} */\nAdd.prototype.type;\n/** @type {?} */\nAdd.prototype.payload;\n}\n\n\nexport type Actions = Add;\n\n\n","import { createEntityAdapter, EntityAdapter, EntityState } from '@ngrx/entity';\nimport * as productActions from '../actions/Product';\nimport { Product } from '../models/product';\n\nexport interface State extends EntityState<Product> {\n    selectedProductId: string | null;\n}\n/**\n * createEntityAdapter creates many an object of helper\n * functions for single or multiple operations\n * against the dictionary of records. The configuration\n * object takes a record id selector function and\n * a sortComparer option which is set to a compare\n * function if the records are to be sorted.\n */\nexport const adapter: EntityAdapter<Product> = createEntityAdapter<Product>({\n    selectId: (product: Product) => product.id,\n    sortComparer: false,\n});\n/**\n * getInitialState returns the default initial state\n * for the generated entity state. Initial state\n * additional properties can also be defined.\n */\nexport const initialState: State = adapter.getInitialState({\n    selectedProductId: null,\n});\n/**\n * @param {?=} state\n * @param {?=} action\n * @return {?}\n */\nexport function reducer(state = initialState,\n    action: productActions.Actions): State {\n    switch (action.type) {\n        case productActions.ADD: {\n            return {\n                ...adapter.addOne(action.payload, state),\n                selectedProductId: state.selectedProductId\n            };\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const /** @type {?} */ getSelectedId = (state: State) => state.selectedProductId;\n","import { State as RootState } from '@branding/rootstate';\nimport { createFeatureSelector, createSelector, ActionReducerMap } from '@ngrx/store';\n\nimport { reducer as productReducer, State as fromProductState, adapter as fromProductsAdapter } from './products';\nimport {Product} from '../models/product';\nimport { MemoizedSelector } from '@ngrx/store/src/selector';\n\nimport { Dictionary, EntitySelectors } from '@ngrx/entity/src/models';\n\nexport interface ProductsState {\n    products: fromProductState;\n}\n\nexport interface State extends RootState {\n    products: ProductsState;\n}\n\nexport const /** @type {?} */ reducers: any = {\n    products: productReducer\n};\n/**\n * The createFeatureSelector function selects a piece of state from the root of the state object.\n * This is used for selecting feature states that are loaded eagerly or lazily.\n */\nexport const getProductState: MemoizedSelector<any, ProductsState> = createFeatureSelector<ProductsState>('products');\n/**\n * Every reducer module exports selector functions, however child reducers\n * have no knowledge of the overall state tree. To make them usable, we\n * need to make new selectors that wrap them.\n * \n * The createSelector function creates very efficient selectors that are memoized and\n * only recompute when arguments change. The created selectors can also be composed\n * together to select different pieces of state.\n */\nexport const getProductEntitiesState: MemoizedSelector<any, fromProductState> = createSelector(\n    getProductState,\n    state => state.products\n);\n/**\n * Adapters created with \\@ngrx/entity generate\n * commonly used selector functions including\n * getting all ids in the record set, a dictionary\n * of the records by id, an array of records and\n * the total number of records. This reducers boilerplate\n * in selecting records from the entity state.\n */\nconst entityFns = fromProductsAdapter.getSelectors(getProductEntitiesState);\nexport const {\n    selectIds: getProductIds,\n    selectAll: getAllProducts,\n    selectTotal: getTotalProducts,\n  } = entityFns;\nexport const {selectEntities: getProductEntities}: EntitySelectors<Product, any> = entityFns;\n\n\n","import { Store } from '@ngrx/store';\nimport {State} from '../reducers';\nimport {Add} from '../actions/product';\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\nexport class AddProductContainerComponent {\n/**\n * @param {?} store\n */\nconstructor(private store: Store<State>) {\n    }\n/**\n * @param {?} name\n * @return {?}\n */\naddProduct(name: string) {\n        this.store.dispatch(new Add({\n            id: Math.random().toString(),\n            name: name\n        }));\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'pm-add-product-container',\n    template: `\n        <div>\n        <pm-add-product (addProduct)=\"addProduct($event)\"></pm-add-product>\n        </div>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Store, },\n];\n}\n\nfunction AddProductContainerComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nAddProductContainerComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAddProductContainerComponent.ctorParameters;\n/** @type {?} */\nAddProductContainerComponent.prototype.store;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Component, Input, ElementRef, EventEmitter, ChangeDetectionStrategy } from '@angular/core';\nimport { Output } from '@angular/core';\nexport class AddProductComponent {\n     addProduct = new EventEmitter();\n/**\n * @param {?} el\n */\nconstructor(public el: ElementRef) {\n\n    }\n/**\n * @param {?} event\n * @return {?}\n */\naddProductClick(event) {\n        const /** @type {?} */ name = this.el.nativeElement.value;\n        this.addProduct.emit(name);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'pm-add-product',\n    template: `\n        <div>\n        <form (ngSubmit)=\"addProductClick($event)\">\n            <p>Product Name:<input type=\"text\" name=\"prodName\" id=\"prodName\"></p>\n        </form>\n        </div>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ElementRef, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'addProduct': [{ type: Output },],\n};\n}\n\nfunction AddProductComponent_tsickle_Closure_declarations() {\n/** @type {?} */\nAddProductComponent.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAddProductComponent.ctorParameters;\n/** @type {?} */\nAddProductComponent.propDecorators;\n/** @type {?} */\nAddProductComponent.prototype.addProduct;\n/** @type {?} */\nAddProductComponent.prototype.el;\n}\n\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule } from '@angular/router';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducers } from './reducers';\nimport { AddProductContainerComponent } from './containers/add-product-container';\nimport { AddProductComponent } from './components/add-product';\n\nconst /** @type {?} */ COMPONENTS = [\n    AddProductComponent,\n    AddProductContainerComponent\n];\nexport class ProductsModule { static decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [\n        CommonModule,\n        /**\n         * StoreModule.forFeature is used for composing state\n         * from feature modules. These modules can be loaded\n         * eagerly or lazily and will be dynamically added to\n         * the existing state.\n         */\n        StoreModule.forFeature('products', reducers),\n\n        /**\n         * Effects.forFeature is used to register effects\n         * from feature modules. Effects can be loaded\n         * eagerly or lazily and will be started immediately.\n         *\n         * All Effects will only be instantiated once regardless of\n         * whether they are registered once or multiple times.\n         */\n        EffectsModule.forFeature([]),\n    ],\n    declarations: COMPONENTS,\n    providers: [],\n    exports: COMPONENTS\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ProductsModule_tsickle_Closure_declarations() {\n/** @type {?} */\nProductsModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nProductsModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { InjectionToken } from '@angular/core';\nexport class ProductManagementConfig {\n    baseUrl: string;\n}\n\nfunction ProductManagementConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nProductManagementConfig.prototype.baseUrl;\n}\n\n\nexport const /** @type {?} */ PRODUCT_MANAGEMENT_CONFIG = new InjectionToken<ProductManagementConfig>(\n    '@aicpa-projectmanagement/releasemanagement Config'\n);\n\nexport const /** @type {?} */ INITIAL_OPTIONS = new InjectionToken<ProductManagementConfig>(\n    '@aicpa-projectmanagement/releasemanagement Initial Options'\n);\n/**\n * @param {?} _config\n * @return {?}\n */\nexport function createConfig(_config: ProductManagementConfig): ProductManagementConfig {\n    const /** @type {?} */ DEFAULT_SETTINGS: ProductManagementConfig = {\n        baseUrl: ''\n    };\n    const /** @type {?} */ initialSettings = _config;\n    const /** @type {?} */ config = Object.assign({}, DEFAULT_SETTINGS, initialSettings);\n    if (config.baseUrl == null) {\n        throw new Error(`Product Management base url is required, got ${config.baseUrl}`);\n    }\n    return config;\n}\n\nexport type ProductManagementSettings =\n    | Partial<ProductManagementConfig>\n    | (() => Partial<ProductManagementConfig>);\n\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { ProductsModule } from '../src/products/products.module';\nimport { createConfig, INITIAL_OPTIONS, PRODUCT_MANAGEMENT_CONFIG, ProductManagementSettings } from './config';\nimport { AddProductContainerComponent } from './products/containers/add-product-container';\n\nexport const /** @type {?} */ COMPONENTS = [\n];\nexport class ProductManagementModule {\n/**\n * @param {?=} settings\n * @return {?}\n */\nstatic forRoot(settings: ProductManagementSettings = {}): ModuleWithProviders {\n    return {\n      ngModule: ProductManagementModule,\n      providers: [\n        {\n          provide: INITIAL_OPTIONS,\n          useValue: settings\n        },\n        {\n          provide: PRODUCT_MANAGEMENT_CONFIG,\n          deps: [INITIAL_OPTIONS],\n          useFactory: createConfig,\n        },\n      ],\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  imports: [\n    CommonModule,\n    RouterModule,\n    ProductsModule,\n    RouterModule.forChild([\n      { path: '', component: AddProductContainerComponent },\n    ])],\n  declarations: COMPONENTS,\n  exports: COMPONENTS,\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ProductManagementModule_tsickle_Closure_declarations() {\n/** @type {?} */\nProductManagementModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nProductManagementModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["ADD","adapter","createEntityAdapter","selectId","product","id","sortComparer","initialState","getInitialState","selectedProductId","reducers","products","state","action","type","productActions.ADD","Object","assign","addOne","payload","getProductState","createFeatureSelector","getProductEntitiesState","createSelector","fromProductsAdapter","getSelectors","Add$1","this","AddProductContainerComponent","store","prototype","addProduct","name","dispatch","Add","Math","random","toString","decorators","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","ctorParameters","Store","AddProductComponent","el","EventEmitter","addProductClick","event","nativeElement","value","emit","ElementRef","propDecorators","Output","COMPONENTS","ProductsModule","NgModule","imports","CommonModule","StoreModule","forFeature","EffectsModule","declarations","providers","exports","ProductManagementConfig","PRODUCT_MANAGEMENT_CONFIG","InjectionToken","INITIAL_OPTIONS","createConfig","_config","initialSettings","config","baseUrl","Error","ProductManagementModule","forRoot","settings","ngModule","provide","useValue","deps","useFactory","RouterModule","forChild","path","component"],"mappings":"oiBAIO,IAAMA,EAAM,iBCYlBC,EAAAC,EAAAA,qBAAGC,SAAU,SAACC,GAAqB,OAAAA,EAAQC,IACxCC,cAAc,IAQjBC,EAAAN,EAAAO,iBAAGC,kBAAmB,OCRhB,IAAMC,GACTC,SDcJ,SAHCC,EAIGC,GACA,YALJ,IAAAD,IAACA,EAADL,GAKYM,EAHOC,MAIX,KAHKC,EAID,OAAZC,OAAAC,UACmBhB,EAHQiB,OAAOL,EAAOM,QAASP,IAIlCH,kBAHmBG,EAAMH,oBAMjC,QACI,OAHOG,KCdlBQ,EAAAC,EAAAA,sBAAA,YAYAC,EAAAC,EAAAA,eAFGH,EACA,SAAAR,GAAS,OAAAA,EAAMD,WFhCNX,GE8CZwB,EAAAC,aAAAH,GF9CkB,kBACnBI,EAAA,WAMA,OADA,SAFuBP,GAAAQ,KAAvBR,QAAuBA,EADVQ,KAAbb,KAAoBd,GAFpB,GGDA4B,EAAA,WAIA,SAAAA,EADwBC,GAAAF,KAAxBE,MAAwBA,SAOxBD,EAAAE,UAAAC,WAAA,SAJKC,GAKGL,KAJKE,MAAMI,SAAS,IAAIC,GAKpB7B,GAJI8B,KAAKC,SAASC,WAKlBL,KAJMA,QATlB,GAYOJ,EAAPU,aACExB,KAAMyB,EAAAA,UAAWC,OAKfC,SAJU,2BAKVC,SAJU,qHASVC,gBAJiBC,EAAAA,wBAAwBC,WAI5CjB,EAADkB,eAAC,WAAA,QAOAhC,KAAMiC,EAAAA,SCjCP,IAAAC,EAAA,WAKA,SAAAA,EAAuBC,GAAAtB,KAAvBsB,GAAuBA,EAJlBtB,KAALI,WAEkB,IAAImB,EAAAA,oBAStBF,EAAAlB,UAAAqB,gBAAA,SAHKC,GAIG,IAHMpB,EAAOL,KAAKsB,GAAGI,cAAcC,MAInC3B,KAHKI,WAAWwB,KAAKvB,MAX7B,GAaOgB,EAAPV,aACExB,KAAMyB,EAAAA,UAAWC,OAIfC,SAHU,iBAIVC,SAHU,iMAUVC,gBAHiBC,EAAAA,wBAAwBC,WAI5CG,EAADF,eAAC,WAAA,QAMAhC,KAVC0C,EAAAA,cAOKR,EAAPS,gBAMA1B,aALiBjB,KAAM4C,EAAAA,UCvBvB,IAAMC,GACFX,EACApB,GAEJgC,EAAA,kBAAA,aAAA,GAEqCA,EAArCtB,aACExB,KAAM+C,EAAAA,SAAUrB,OADdsB,SACIC,EAAAA,aAOAC,EAAAA,YAEYC,WAAW,WAAYvD,GAQnCwD,EAAAA,cAEcD,gBAAlBE,aAEcR,EADdS,aACAC,QAESV,MAIZC,EAADd,eAAC,WAAA,UC3CD,IAAAwB,EAAA,WAEA,OAFA,aAAA,GAKaC,EAA4B,IAAIC,EAAAA,eAMzC,qDAFSC,EAAkB,IAAID,EAAAA,eAM/B,8DAMJ,SAAAE,EARCC,GASG,IALMC,EAAkBD,EAClBE,EAAS7D,OAAOC,WAKlB6D,QARS,IAGsCF,GASnD,GARsB,MAQlBC,EAROC,QASP,MARM,IAAIC,MAAM,gDAACF,EAAsDC,SAU3E,OAROD,ECfJ,IAAMlB,KAEbqB,EAAA,WAAA,SAAAA,YAGGA,EAAHC,QAEA,SAFGC,GAGC,YAHJ,IAAAA,IAAGA,OAIGC,SAFUH,EAGVZ,YAEIgB,QAFSX,EAGTY,SAFUH,IAKVE,QAFSb,EAGTe,MAFMb,GAGNc,WAFYb,QAdtB,GAmBOM,EAAP1C,aACExB,KAAM+C,EAAAA,SAAUrB,OAGhBsB,SACEC,EAAAA,aACAyB,EAAAA,aACA5B,EACA4B,EAAAA,aAFaC,WACTC,KAAM,GAAIC,UAAW/D,MAI3BuC,aAFcR,EAGdU,QAFSV,MAIVqB,EAADlC,eAAC,WAAA"}
